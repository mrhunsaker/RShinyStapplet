DROP FUNCTION IF EXISTS `STAP_generate_class_code`;
DROP FUNCTION IF EXISTS `STAP_generate_admin_code`;
DROP PROCEDURE IF EXISTS `STAP_new_class_code`;

delimiter //

CREATE FUNCTION `STAP_generate_class_code` ( ) RETURNS CHAR(6)
BEGIN
    RETURN CONCAT (
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16))
    );
END

//

CREATE FUNCTION `STAP_generate_admin_code` ( ) RETURNS CHAR(4)
BEGIN
    RETURN CONCAT (
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16)),
        HEX(FLOOR(RAND()*16))
    );
END

//

CREATE PROCEDURE `STAP_new_class_code`(IN `quant` TINYINT(1), IN `numVar` TINYINT(4), IN `numGroups` TINYINT(4))
BEGIN
    DECLARE testCode CHAR(6);
    DECLARE adminCode CHAR(4);
    DECLARE groupCount TINYINT(4);
    SELECT STAP_generate_admin_code() INTO adminCode;
    REPEAT
        SELECT STAP_generate_class_code() INTO testCode;
        INSERT IGNORE INTO `tblMaster` (`ClassCode`,`AdminCode`,`ExpDate`,`Quant`,`NumVar`)
            VALUES (testCode, adminCode, DATE_ADD(NOW(), INTERVAL 3 DAY), quant, numVar);
    UNTIL ROW_COUNT() > 0
    END REPEAT;
    IF numVar = 2 THEN
        UPDATE `tblMaster` SET `Var1Name` = 'Explanatory', `Var2Name` = 'Response' WHERE `ClassCode` = testCode;
    ELSE
        SET groupCount = 1;
        REPEAT
            INSERT INTO `tblGroupName` (`ClassCode`, `GroupID`, `GroupName`) VALUES (testCode, groupCount, CONCAT('Group ', groupCount));
            SET groupCount = groupCount + 1;
        UNTIL groupCount > numGroups
        END REPEAT;
    END IF;
    SELECT testCode AS `ClassCode`, adminCode AS `AdminCode`;
END

//

delimiter ;